apply(xmat,2,sd)
#4. 1번의 x를 이용하여 6 x 5 의 행렬을 생성하고 xmat 변수에 저장 하시 오. (행기준으로 채움)
xmat <- matrix(x,6,5)
###############################
# 실습 문제
#1. 등차수열 1,3,5,... 를 1부터 30까지 생성하여 x에 저장하시오.
x <- seq(1,30,2)
#4. 1번의 x를 이용하여 6 x 5 의 행렬을 생성하고 xmat 변수에 저장 하시 오. (행기준으로 채움)
xmat <- matrix(x,6,5)
apply(xmat,2,sd)
apply(xmat,2,var)
setwd("C:/Users/hoon3/SH_Git/Study/R")
cafeData <- read.csv('data\cafedata.csv')
cafeData <- read.csv('cafedata.csv')
cafeData <- read.csv('data\cafedata.csv')
cafeData <- read.csv('data\\cafedata.csv')
str(cafeData)
sum(is.na(cafeData))
sum(is.na(cafeData$Coffees))
# na.omit()결측치 삭제
na.omit(cafeData)
sum(is.na(cafeData))
# na.omit()결측치 삭제
na.omit(cafeData)
# na.omit()결측치 삭제
cafeData <- na.omit(cafeData)
sum(is.na(cafeData))
View(cafeData)
cafeData <- read.csv('data\\cafedata.csv')
# 행단위 NA검사 >> 행의 모든 요소가 NA 아니면 TRUE
complete.cases(cafeData)
cafeData[34,]
# 최빈값
table(cafeData$Coffees)
stem(cafeData$Coffees)
stem(table(cafeData$Coffees))
# 최빈값
table(cafeData$Coffees)
# 최빈값
y <- table(cafeData$Coffees)
which(y == max(y))
which(y == max(y))
max(y)
y
y == max(y)
names(which(y == max(y)))
# 줄기잎 그래프
data <- c(1,1,2,2,3,3,3,3,4)
stem(data)
data <- c(11,11,22,22,23,31,32,33,34,40)
stem(data)
data <- c(1,11,11,22,22,23,31,32,33,34,40)
stem(data)
height <- c(164,166,168,170,172,174,176)
#(1) 평균
height.m <- mean(height)
#(2) 편차
height-height.m
#(2) 편차
s<- height-height.m
#(3) 분산
sum(s**2)
s**2
#(3) 분산
sum(s**2)/length(height)
#(3) 분산
v <- sum(s**2)/length(height)
v
v1 <- mean(s**2)
v1
v,v1
c(v,v1)
sqrt(v)
var(height)
sd(height)
height <- c(164,166,168,170,172,174,176)
var(height)
sd(height)
#(1) 평균
height.m <- mean(height)
#(2) 편차
s <- height-height.m
#(3) 분산
v <- sum(s**2)/length(height)
v1 <- mean(s**2)
c(v,v1)
s
sum(s**2)
#(3) 분산
v <- sum(s**2)/(length(height)-1)
c(v,v1)
#표준편차
sqrt(v)
var(height)
sd(height)
airquality
complete.cases(airquality)
sum(complete.cases(airquality))
airquality[complete.cases(airquality)]
length(airquality) - sum(complete.cases(airquality))
length(airquality)
nrow(airquality)
nrow(airquality) - sum(complete.cases(airquality))
data <- na.omit(airquality)
data
mean(data)
mean(data[1])
str(data)
mean(data[1])
mode(data[1])
data
data[1]
data[[1]]
mean(data[[1]])
data[5]
data[6]
data[7]
table(data[1])
y <- table(data[1])
names(which(y == max(y)))
for(i in 1:6){
mean(data[[i]])
var(data[[i]])
sd(data[[i]])
y <- table(data[i])
names(which(y == max(y)))
}
for(i in 1:6){
cat(mean(data[[i]]))
cat(var(data[[i]]))
cat(sd(data[[i]]))
y <- table(data[i])
cat(names(which(y == max(y))))
}
for(i in 1:6){
cat(names(data[i]),'\n')
cat(mean(data[[i]]),'\n')
cat(var(data[[i]]),'\n')
cat(sd(data[[i]]),'\n')
y <- table(data[i])
cat(names(which(y == max(y))),'\n')
}
for(i in 1:6){
cat(names(data[i]),'\n')
cat(mean(data[[i]]),'\n')
cat(var(data[[i]]),'\n')
cat(sd(data[[i]]),'\n')
y <- table(data[i])
cat(names(which(y == max(y))),'\n\n')
}
y <- table(data[6])
y == max(y)
length(data)
length(data[1])
length(data[[1]])
complete.cases(airquality)
IQR(data)
IQR(data[[i]])
## iris
str(iris)
# 결측치 체크 & 처리
is.na(iris)
# 결측치 체크 & 처리
sum(is.na(iris))
## iris
# 데이터 기본 정보 출력
str(iris)
iris[4]
iris[5]
iris[4]
plot(iris[4])
boxplot(iris[4])
# 꽃받침 너비에 대한 이상치 체크
boxplot(iris)
# 꽃받침 너비에 대한 이상치 체크
boxplot.stats(iris)
# 꽃받침 너비에 대한 이상치 체크
boxplot.stats(iris)
# 꽃받침 너비에 대한 이상치 체크
boxplot.stats(iris$Petal.Width)
# 꽃받침 너비에 대한 이상치 체크
boxplot.stats(iris$Petal.Width)$out
# 꽃받침 너비에 대한 이상치 체크
boxplot.stats(iris$Sepal.Width)$out
summary(iris)
quantile(iris)
quantile(iris$Sepal.Width)
summary(iris)[1]
summary(iris)[1,]
summary(iris)[2,]
