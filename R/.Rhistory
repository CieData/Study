MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율*0.7 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
data=training)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=TRUE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
data=training)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
maxit = 20
data=training)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
rang  = 20
data=training)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
rang  = 20
data=training)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
rang  = 0.7
data=training)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
rang  = 0.7,
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
rang  = 0.8,
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
rang  = 0.6,
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
rang  = 0.5,
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
rang  = 0.4,
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
rang  = 0.3,
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
rang  = 0.7,
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
rang  = 1,
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
rang  = 1.5,
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
rang  = 1.7,
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
rang  = 2,
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
rang  = 100,
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
rang  = 3,
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
rang  = 2,
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
rang  = 1.7,
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
rang  = 1.8,
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
rang  = 1.9,
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
rang  = 1.85,
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
rang  = 1.87,
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
decay = 0,
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
decay = 1,
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
decay = 0.7,
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
decay = 0.5,
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
decay = 2,
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
decay = 3,
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
intrain<-createDataPartition(y=data$신용평점,p=0.63,list=FALSE)
intrain
training<-data[intrain,]## 트레이닝데이터
training
testing<-data[-intrain,]## 테스트 데이터 나눔
testing
##인공신경망
set.seed(123)
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=3, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
skip = TRUE,
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
set.seed(123)
intrain<-createDataPartition(y=data$신용평점,p=0.7,list=FALSE)
intrain
training<-data[intrain,]## 트레이닝데이터
training
testing<-data[-intrain,]## 테스트 데이터 나눔
testing
m<-nnet(신용평점 ~ 유동비율 + 부채비율 + 순이익증가율 + 총자산회전율 + 이자보상비율 + 단기차입금.총자본,
size=5, #은닉층 노드 갯수
linout=FALSE, # TRUE이면 활성함수가 선형출력(liner output) FALSE면 로지스틱함수가 적용
MaxNWts=1000, # 가중치의 최대개수로 기본값은 1000, 모델이 복잡하다면 가중치의 수를 증가시켜야함.
data=training)
#나머지 옵션도 있음. 찾아볼 것.
pre_nnet<-predict(m,newdata=testing)
head(pre_nnet)
pre_nnet<-as.factor(round(pre_nnet))
pre_nnet
#예측
confusionMatrix(pre_nnet,testing$신용평점)
